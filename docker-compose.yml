version: '3.3'

services:
  nginx:
    container_name: nginx
    image: linuxserver/letsencrypt
    restart: always
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./.config/letsencrypt:/config
      - ./.config/nginx.conf:/config/nginx/site-confs/default
      - ./.config/ssl.conf:/config/nginx/ssl.conf
    depends_on:
      - portfolio-website
      - admin-dashboard
    networks:
      - frontend
    environment:
      - PUID=1001 # get on dockerhost through command "id <user>""
      - PGID=1001
      - EMAIL=erik@eriksanne.com
      - URL=eriksanne.com
      - SUBDOMAINS=www
      - TZ=Europe/London
      - VALIDATION=dns
      - DNSPLUGIN=cloudflare
      # - STAGING=true # this should be uncommented when testing for initial success, to avoid some rate limiting

  certbot:
    image: certbot/certbot
    restart: unless-stopped
    volumes:
      - ./.config/certbot/conf:/etc/letsencrypt
      - ./.config/certbot/www:/var/www/certbot
    entrypoint: "/bin/sh -c 'trap exit TERM; while :; do certbot renew; sleep 12h & wait $${!}; done;'"

  portfolio-website:
    container_name: portfolio-website
    build: ./client
    restart: always
    expose:
      - "8080"
    networks:
      - frontend
    environment:
      - PORT=8080
      - NODE_ENV=production

  admin-dashboard:
    container_name: admin-dashboard
    build: ./admin
    expose:
      - "8081"
    networks:
      - frontend
    environment:
      - PORT=8081
      - NODE_ENV=production

  server:
    container_name: 'server'
    depends_on:
      - mongo
    build: ./server
    ports:
      - "8082:8082"
    networks:
      - backend

  mongo:
    container_name: 'mongodb'
    image: mongo
    command: --bind_ip_all
    networks:
      - backend
    ports:
      - "27017:27017"
    restart: always
    environment:
      MONGO_INITDB_ROOT_USERNAME: root
      MONGO_INITDB_ROOT_PASSWORD: example

  mongo-express:
    container_name: 'mongo-express'
    depends_on:
      - mongo
    image: mongo-express
    restart: always
    networks:
      - frontend
      - backend
    ports:
      - "8083:8081"
    environment:
      ME_CONFIG_MONGODB_ADMINUSERNAME: root
      ME_CONFIG_MONGODB_ADMINPASSWORD: example

networks:
  frontend:
  backend:
