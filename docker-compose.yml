version: '3.1'

services:
  nginx:
    image: nginx:1.15-alpine
    restart: unless-stopped
    networks:
      - docker-network
    volumes:
      - ./.config/nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./.config/certbot/conf:/etc/letsencrypt
      - ./.config/certbot/www:/var/www/certbot
    ports:
      - "80:80"
      - "443:443"
    command: "/bin/sh -c 'while :; do sleep 6h & wait $${!}; nginx -s reload; done & nginx -g \"daemon off;\"'"
    depends_on:
      - client
      - admin

  certbot:
    image: certbot/certbot
    restart: unless-stopped
    volumes:
      - ./.config/certbot/conf:/etc/letsencrypt
      - ./.config/certbot/www:/var/www/certbot
    entrypoint: "/bin/sh -c 'trap exit TERM; while :; do certbot renew; sleep 12h & wait $${!}; done;'"

  client:
    container_name: client
    hostname: client
    build: ./client
    ports:
      - "8080:80"
    networks:
      - docker-network
    environment:
      - PORT=80
      - NODE_ENV=production

  admin:
    container_name: admin
    hostname: admin
    build: ./admin
    ports:
      - "8081:80"
    networks:
      - docker-network
    environment:
      - PORT=80
      - NODE_ENV=production

  server:
    container_name: 'server'
    depends_on:
      - mongo
    build: ./server
    ports:
      - "8082:8082"
    networks:
      - docker-network

  mongo:
    container_name: 'mongodb'
    image: mongo
    command: --bind_ip_all
    networks:
      - docker-network
    ports:
      - "27017:27017"
    restart: always
    environment:
      MONGO_INITDB_ROOT_USERNAME: root
      MONGO_INITDB_ROOT_PASSWORD: example

  mongo-express:
    container_name: 'mongo-express'
    depends_on:
      - mongo
    image: mongo-express
    restart: always
    networks:
      - docker-network
    ports:
      - "8083:8081"
    environment:
      ME_CONFIG_MONGODB_ADMINUSERNAME: root
      ME_CONFIG_MONGODB_ADMINPASSWORD: example

networks:
  docker-network:
    driver: bridge
